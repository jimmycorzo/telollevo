{"version":3,"file":"default-src_app_services_Firebase_service_ts.js","mappings":"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","sources":["./src/app/services/firebase.service.ts"],"sourcesContent":["import { Inject, Injectable, PLATFORM_ID, Query } from '@angular/core';\nimport { Auth, createUserWithEmailAndPassword, signInWithEmailAndPassword } from '@angular/fire/auth';\nimport { collection, collectionData, CollectionReference, Firestore, query, where, runTransaction, setDoc, getDocs, getDoc, updateDoc, deleteDoc, limit, startAfter, docData } from '@angular/fire/firestore';\nimport { CategoriasModel } from 'app/models/categorias.model';\nimport { SucursalesModel } from 'app/models/sucursales.model';\nimport { addDoc, doc, DocumentReference, FieldValue, orderBy, serverTimestamp, Transaction } from '@firebase/firestore';\nimport { Observable } from 'rxjs';\nimport { switchMap, map, concatAll, shareReplay } from 'rxjs/operators';\nimport { DatosModel } from 'app/models/datos.model';\nimport { DireccionesModel } from 'app/models/direcciones.model';\nimport { TiposModel } from 'app/models/tipos.model';\nimport { ContadoresModel } from 'app/models/contadores.model';\nimport { ArticulosModel } from 'app/models/articulos.model';\nimport { TiendasModel } from 'app/models/tiendas.model';\nimport { UsuariosModel } from 'app/models/usuarios.model';\nimport { DispositivosModel } from 'app/models/dispositivos.model';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { CuentasModel } from 'app/models/cuentas.model';\nimport { TransferStateHelper } from 'app/utils/transfer-state-helper';\nimport { DataStore } from 'app/shell/data-store';\nimport { isPlatformServer } from '@angular/common';\nimport { DirectoriosModel } from 'app/models/directorios.model';\nimport { ClasificacionesModel } from 'app/models/clasificaciones.model';\nimport { MisProductosModel } from 'app/models/misproductos.model';\nimport { leftJoinTiendas, leftJoinClases, leftJoinDepartamentos, leftJoinHorarios } from 'app/services/collectionJoin';\nimport { HorariosModel } from 'app/models/horarios.model';\nimport { ProductosModel } from 'app/models/buscar.model';\nimport { DepartamentosModel } from 'app/models/departamentos.model';\nimport { ClasesModel } from 'app/models/clases.model';\nimport { SeleccionadoresModel } from 'app/models/titulos.model';\nimport { ServiciosModel } from 'app/models/servicios.model';\nimport { LinksModel } from 'app/models/links.model';\n\n\nexport interface User {\n  uid: string;\n  email: string;\n}\n\nexport interface Message {\n  createdAt: FieldValue;\n  id: string;\n  from: string;\n  msg: string;\n  fromName: string;\n  myMsg: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FirebaseService {\n  private cuentasDataStore: DataStore<Array<CuentasModel>>;\n  private direccionesDataStore: DataStore<Array<DireccionesModel>>;\n  private categoriasDataStore: DataStore<Array<CategoriasModel>>;\n  private directoriosDataStore: DataStore<Array<DirectoriosModel>>\n  private clasificacionesDataStore: DataStore<Array<ClasificacionesModel>>\n  private productosDataStore: DataStore<Array<MisProductosModel>>;\n  private directorioDataStore: DataStore<Array<DirectoriosModel>>;\n  private sucursalesDataStore: DataStore<Array<SucursalesModel>>;\n  private horariosDataStore: DataStore<Array<HorariosModel>>;\n  private departamentosDataStore: DataStore<Array<DepartamentosModel>>;\n  private clasesDataStore: DataStore<Array<ClasesModel>>;\n  private tiendasDataStore: DataStore<Array<TiendasModel>>;\n  private servicioDataStore: DataStore<ServiciosModel[]>;\n  private linksDataStore: DataStore<LinksModel[]>;\n\n  currentUser: User = null;\n  tiendaIdBase = '';\n  claseIdBase = '';\n  categoriaIdBase = '';\n  clasificacionBase = '';\n  categoriaBaseId = '';\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: object,\n    private afAuth: Auth,\n    private http: HttpClient,\n    private transferStateHelper: TransferStateHelper,\n    private afs: Firestore) {\n    this.afAuth.onAuthStateChanged(user => {\n      // console.log('Changed: ', user);\n      this.currentUser = user;\n    });\n  }\n\n\n  //#region Auth\n  async signUp({ email, password }) {\n    const credential = await createUserWithEmailAndPassword(\n      this.afAuth,\n      email,\n      password\n    );\n\n    console.log('result: ', credential);\n    const uid = credential.user.uid;\n\n    // var docRef: DocumentReference = null;\n    // docRef = doc(this.afs,\n    //   'users/${uid}'\n    // );\n    return setDoc(doc(this.afs,\n      'users/${uid}'\n    ), {\n      uid,\n      email: credential.user.email\n    });\n  }\n\n  signIn({ email, password }) {\n    return signInWithEmailAndPassword(this.afAuth, email, password);\n  }\n\n  signOut() {\n    return this.afAuth.signOut();\n  }\n\n  addChatMessage(msg) {\n    return addDoc(collection(this.afs, 'messages'), {\n      msg,\n      from: this.currentUser.uid,\n      createdAt: serverTimestamp()\n    });\n  }\n\n  getChatMessages() {\n    let users = [];\n\n    return this.getUsers().pipe(\n      switchMap(res => {\n        users = res;\n        console.log('all users: ', users);\n        return collectionData<Message>(\n          query<Message>(\n            collection(this.afs, 'messages') as CollectionReference<Message>,\n            orderBy('createdAt')\n          ), { idField: 'id' }\n        );\n      }),\n      map(messages => {\n        for (let m of messages) {\n          m.fromName = this.getUserForMsg(m.from, users);\n          m.myMsg = this.currentUser.uid === m.from;\n        }\n        console.log('all messages: ', messages);\n        return messages;\n      })\n    )\n  }\n\n  getUsers() {\n    return collectionData<User>(\n      query<User>(\n        collection(this.afs, 'users') as CollectionReference<User>,\n        // where('published', '==', true)\n      ), { idField: 'uid' }\n    );\n  }\n\n  getUserForMsg(msgFromId, users: User[]): string {\n    for (let usr of users) {\n      if (usr.uid == msgFromId) {\n        return usr.email;\n      }\n    }\n    return 'Deleted';\n  }\n\n  //#endregion Auth\n\n\n  //#region Notificaciones\n\n  async getDispositivos(tiendaId) {\n    var ret = [];\n    var user = await JSON.parse(localStorage.getItem('user'));\n    var uid = user.uid;\n    const q = query(collection(this.afs, 'tiendas'), where('id', '==', tiendaId));\n    const promise = await getDocs(q);\n    if (promise.docs.length > 0) {\n      var tienda = promise.docs[0].data() as TiendasModel;\n      var email = tienda.correo;\n      if (email != null && email != '') {\n        const q1 = query(collection(this.afs, 'usuarios'), where('correo', '==', email), where('activo', '==', true));\n        const promise1 = await getDocs(q1);\n        if (promise1.docs.length > 0) {\n          var usuario = promise1.docs[0].data() as UsuariosModel;\n          if (usuario) {\n            const q2 = query(collection(this.afs, 'dispositivos'), where('uid', '==', usuario.uid));\n            const promise2 = await getDocs(q2);\n            if (promise2.docs.length > 0) {\n              var dispositivo = promise2.docs[0].data() as DispositivosModel;\n              ret.push(dispositivo.dispositivoId);\n            }\n            return ret;\n          }\n        }\n        return ret;\n      }\n    }\n    return ret;\n  }\n\n  async sendMensajeTienda(mensaje, tiendaId) {\n    var dispositivos = await this.getDispositivos(tiendaId);\n    if (dispositivos) {\n      await this.pushMessage(dispositivos, mensaje);\n      // dispositivos.forEach(element => {\n      //     console.log(element);\n      // });\n    }\n  }\n\n  async pushMessage(include_player_ids, mensaje) {\n    var keys = await JSON.parse(localStorage.getItem('keys'));\n    const privateKey = keys.onesignal;\n    let httpOptionsOneSignal = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: privateKey,\n      })\n    };\n    var data = JSON.stringify({\n      \"app_id\": '7d97edb4-db38-448d-b857-d2f5224866b9',\n      include_player_ids,\n      \"contents\": { \"en\": mensaje, \"es\": mensaje },\n      \"headings\": { \"en\": \"'Te Lo Llevo'\", \"es\": \"'Te Lo Llevo'\" },\n    });\n    // console.log(data);\n    const url = \"https://onesignal.com/api/v1/notifications\";\n    return new Promise((resolve, reject) => {\n      this.http.post(url, data, httpOptionsOneSignal)\n        .subscribe(data => {\n          return resolve(data['data']);\n        }, error => {\n          console.log(error);\n        });\n    });\n  }\n  //#endregion\n\n  //#region  Devices\n\n  async createDevice(dispositivoId: string) {\n    var user = JSON.parse(localStorage.getItem('user'));\n    var uid = user.uid;\n    var correo = user.email;\n    var telefono = user.phoneNumber;\n    const q = await query(collection(this.afs, \"dispositivos\"), where(\"uid\", \"==\", uid), where(\"dispositivoId\", \"==\", dispositivoId));\n    const device = await getDocs(q);\n    if (device.docs.length == 0) {\n\n      const refDispositivos = await addDoc(collection(this.afs, \"dispositivos\"), {\n        uid: uid,\n        dispositivoId: dispositivoId,\n        correo: correo,\n        telefono: telefono\n      });\n\n    }\n  }\n\n  //#endregion Devices\n\n\n\n  //#region Tipos\n\n  getTipos() {\n    return collectionData(query(collection(this.afs, 'tipos'), orderBy('tipo'))) as unknown as Observable<TiposModel>;\n  }\n\n  //#endregion Tipos\n\n  //#region Direcciones\n\n  async getDireccionAsync(direccionId: string): Promise<DireccionesModel> {\n    const q = query(collection(this.afs, \"direcciones\"), where(\"id\", \"==\", direccionId));\n    const querySnapshot = await getDocs(q);\n    if (querySnapshot.docs.length > 0)\n      return querySnapshot.docs[0].data() as unknown as DireccionesModel;\n  }\n\n  //#endregion Direcciones\n\n  //#region Sucursales\n\n  async getSucursalAsync(sucursalId: string): Promise<SucursalesModel> {\n    const q = query(collection(this.afs, \"sucursales\"), where(\"id\", \"==\", sucursalId));\n    const querySnapshot = await getDocs(q);\n    if (querySnapshot.docs.length > 0)\n      return querySnapshot.docs[0].data() as unknown as SucursalesModel;\n  }\n\n  //#endregion Sucursales\n\n  //#region Categorias\n\n  getCategorias() {\n    return collectionData<CategoriasModel>(\n      query<CategoriasModel>(\n        collection(this.afs, 'categorias') as CollectionReference<CategoriasModel>,\n        where('categoria', '!=', '')\n      ), { idField: 'id' }\n    );\n  }\n\n  public searchCategorias(categoria: string): Observable<Array<CategoriasModel>> {\n    return collectionData<CategoriasModel>(\n      query<CategoriasModel>(\n        collection(this.afs, 'categorias') as CollectionReference<CategoriasModel>,\n        where('categoria', '==', categoria)\n      ), { idField: 'id' }\n    );\n\n  }\n  //#endregion Categorias\n\n  //#region Pedidos\n\n  async createPedido(sucursalId: string, direccion: DireccionesModel, pago: CuentasModel, values, numero: { property1: string; }) {\n    var user = JSON.parse(localStorage.getItem('user'));\n    var uid = user.uid;\n\n    var pedidoId: string;\n    var articuloId: string;\n    var direccionId: string;\n\n    var contador: ContadoresModel;\n    var q = query(collection(this.afs, 'contadores'), where('tipo', '==', 'pedidos'), where('sucursalId', '==', sucursalId));\n    var promise = await getDocs(q);\n    if (promise.docs.length > 0)\n      contador = promise.docs[0].data() as unknown as ContadoresModel;\n    var cont = contador.contador + 1;\n    contador.contador = cont;\n    await this.updateContador(contador);\n\n    var tiendas: Array<string> = new Array<string>();\n\n    values.forEach(async producto => {\n      if (!tiendas.find(x => x == producto.tiendaId)) {\n        tiendas.push(producto.tiendaId);\n      }\n    });\n\n    const refPedido = await addDoc(collection(this.afs, \"pedidos\"), {\n      fecha: new Date()\n    });\n    var pedido = await getDoc(refPedido);\n    pedidoId = pedido.id;\n\n    const fecha = new Date();\n    const diaHora = fecha.toString();\n\n    await updateDoc(refPedido, {\n      id: pedidoId,\n      uid: uid,\n      fecha: diaHora,\n      pedido: cont,\n      direccionId: direccion?.id,\n      direccion: direccion?.direccion,\n      telefono: direccion?.telefono,\n      detalle: direccion?.detalle,\n      pagoId: pago.id,\n      pago: pago.cuenta,\n      sucursalId: sucursalId,\n      tiendaId: tiendas,\n      cancelado: '',\n      elaborado: '',\n      entregado: '',\n      activo: true,\n    });\n\n    values.forEach(async producto => {\n      var detalle = '';\n      producto.titulos.forEach(titulo => {\n        if (titulo.seleccionado != '') {\n          titulo.seleccionadores.forEach(seleccionador => {\n            if (seleccionador.id == titulo.seleccionado) {\n              detalle += titulo.titulo + ' - ' + seleccionador.seleccionador + '\\n';\n            }\n          });\n        }\n      });\n\n      const refArticulos = await addDoc(collection(this.afs, \"articulos\"), {\n        detalle: ''\n      });\n      const articulo = await getDoc(refArticulos);\n      articuloId = articulo.id;\n\n      await updateDoc(refArticulos, {\n        id: articuloId,\n        pedidoId: pedidoId,\n        tiendaId: producto.tiendaId,\n        tienda: producto.tienda,\n        productoId: producto.productoId,\n        producto: producto.producto,\n        precio: producto.precioVlr,\n        presentacion: producto.presentacionTxt,\n        cantidad: producto.amount,\n        imagen: producto.imagen,\n        observaciones: producto.observaciones,\n        detalle: detalle\n      });\n    });\n    numero.property1 = sucursalId.toUpperCase() + '-' + contador.contador.toString();\n\n    tiendas.forEach(async tienda => {\n      var listado: Array<string> = [];\n      const q = query(collection(this.afs, \"articulos\"), where('pedidoId', '==', pedidoId), where('tiendaId', '==', tienda));\n      const promise = await getDocs(q);\n      if (promise && promise.docs.length <= 20) {\n        promise.docs.forEach(doc => {\n          var articulo = doc.data() as ArticulosModel;\n          // console.log(articulo)\n          if (articulo.observaciones) {\n            listado.push('(' + articulo.cantidad.toString() + ') ' + articulo.producto.toString() + ' - Observaciones: ' + articulo.observaciones) + '\\r\\n';\n          }\n          else {\n            listado.push('(' + articulo.cantidad.toString() + ') ' + articulo.producto.toString() + '\\r\\n');\n          }\n        });\n      }\n      // Agrega datos adicionales\n      // Fecha y Hora\n      var fecha = new Date();\n      listado.push('Fecha/Hora: ' + diaHora + '\\r\\n');\n      // // Nombre Cliente\n      // listado.push('Cliente: ' + diaHora + '\\r\\n');\n      // Teléfono Cliente\n      if (direccion?.telefono)\n        listado.push('Teléfono: ' + direccion?.telefono + '\\r\\n');\n      // Dirección Cliente\n      if (direccion?.direccion)\n        listado.push('Dirección: ' + direccion?.direccion + '\\r\\n');\n      // Forma Pago\n      listado.push('Forma Pago: ' + pago.cuenta + '\\r\\n');\n      await this.sendMensajeTienda(\"Pedido Número \" + cont.toString() + '\\r\\n' + listado.toString(), tienda);\n    })\n\n    return pedido;\n  }\n\n  async updateContador(values) {\n    const contadoresRef = doc(this.afs, \"contadores\", values.id);\n    await updateDoc(contadoresRef, {\n      id: values.id,\n      contador: values.contador,\n      sucursalId: values.sucursalId,\n      tipo: values.tipo,\n    }).then(() => {\n      console.log('Contador actualizado satisfactoriamente');\n    }).catch((error: any) => {\n      console.log('Error actualizando el contador', error);\n    });\n\n    return;\n\n  }\n  //#endregion Pedidos\n\n  //#region Cuentas\n\n  public getCuentasDataSource(sucursalId: string): Observable<Array<CuentasModel>> {\n    const rawDataSource = query(collection(this.afs, 'cuentas'), where(\"sucursalId\", \"==\", sucursalId), where('activa', '==', true), orderBy('posicion')) as unknown as Observable<Array<CuentasModel>>;\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('cuentas-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getCuentasStore(dataSource: Observable<Array<CuentasModel>>): DataStore<Array<CuentasModel>> {\n    // Use cache if available\n    if (!this.cuentasDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: Array<CuentasModel> = [\n        new CuentasModel(),\n        new CuentasModel(),\n        new CuentasModel(),\n        new CuentasModel(),\n        new CuentasModel(),\n        new CuentasModel()\n      ];\n      this.cuentasDataStore = new DataStore(shellModel);\n\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the browser from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.cuentasDataStore.load(dataSource, 0);\n      } else {\n        // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.cuentasDataStore.load(dataSource);\n      }\n    }\n\n    return this.cuentasDataStore;\n  }\n\n  //#endregion\n\n  //#region Direcciones\n\n  async getDirecciones() {\n    var user = JSON.parse(localStorage.getItem('user'));\n    var uid = user.uid;\n    const q = query(collection(this.afs, 'direcciones'), where('uid', '==', uid));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot;\n  }\n\n  async updateDireccion(values) {\n    if (!values.id) {\n      var user = JSON.parse(localStorage.getItem('user'));\n      values.uid = user.uid;\n\n      const refDirecciones = await addDoc(collection(this.afs, \"direcciones\"), {\n        detalle: ''\n      });\n      const direccion = await getDoc(refDirecciones);\n      const id = direccion.id;\n\n      await updateDoc(refDirecciones, {\n        id: id,\n        uid: values.uid,\n        direccion: values.direccion,\n        detalle: values.detalle ?? '',\n        telefono: values.telefono,\n        latitud: values.latitud,\n        longitud: values.longitud,\n        duracion: values.duracion,\n        distancia: values.distancia,\n      });\n    }\n    else {\n      const direccionesRef = doc(this.afs, \"direcciones\", values.id);\n      await updateDoc(direccionesRef, {\n        id: values.id,\n        uid: values.uid,\n        direccion: values.direccion,\n        detalle: values.detalle ?? '',\n        telefono: values.telefono,\n        latitud: values.latitud,\n        longitud: values.longitud,\n        duracion: values.duracion,\n        distancia: values.distancia,\n      });\n    }\n    return values.id;\n  }\n\n  async deleteDireccion(values) {\n    await deleteDoc(doc(this.afs, \"direcciones\", values.id));\n    return;\n  }\n  public getDireccionesDataSource(): Observable<Array<DireccionesModel>> {\n    var user = JSON.parse(localStorage.getItem('user'));\n    var uid = user.uid;\n\n    const rawDataSource = collectionData(query(collection(this.afs, 'direcciones'), where(\"uid\", \"==\", uid)), { idField: 'id' }) as Observable<Array<DireccionesModel>>;\n    // const rawDataSource = query(collection(this.afs, 'direcciones'), where(\"uid\", \"==\", uid)) as unknown as Observable<Array<DireccionesModel>>;\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('direcciones-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getDireccionesStore(dataSource: Observable<Array<DireccionesModel>>): DataStore<Array<DireccionesModel>> {\n    // Use cache if available\n    if (!this.direccionesDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: Array<DireccionesModel> = [\n        new DireccionesModel(),\n        new DireccionesModel(),\n        new DireccionesModel(),\n        new DireccionesModel(),\n        new DireccionesModel(),\n        new DireccionesModel(),\n      ];\n      this.direccionesDataStore = new DataStore(shellModel);\n\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the browser from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.direccionesDataStore.load(dataSource, 0);\n      } else { // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.direccionesDataStore.load(dataSource);\n      }\n    }\n\n    return this.direccionesDataStore;\n  }\n\n  //#endregion\n\n  //#region Categorias\n\n  public getCategoriasDataSource(): Observable<CategoriasModel[]> {\n\n    const rawDataSource = collectionData(query(collection(this.afs, 'categorias'), where('activa', '==', true), orderBy('posicion')), { idField: 'id' }) as Observable<unknown> as Observable<Array<CategoriasModel>>;\n    //const rawDataSource = collectionData(query(collection(this.afs, 'tiendas'), where(\"categoriaId\", \"==\", categoriaId), where('activa', '==', true), orderBy('posicion')), { idField: 'id' })\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('categorias-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getCategoriasStore(dataSource: Observable<Array<CategoriasModel>>): DataStore<Array<CategoriasModel>> {\n    // Use cache if available\n    if (!this.categoriasDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: Array<CategoriasModel> = [\n        new CategoriasModel(),\n        new CategoriasModel(),\n        new CategoriasModel(),\n        new CategoriasModel(),\n        new CategoriasModel(),\n        new CategoriasModel()\n      ];\n      this.categoriasDataStore = new DataStore(shellModel);\n\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the browser from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.categoriasDataStore.load(dataSource, 0);\n      } else { // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.categoriasDataStore.load(dataSource);\n      }\n    }\n\n    return this.categoriasDataStore;\n  }\n\n  //#endregion\n\n  //#region Directorios\n\n  public getDirectoriosDataSource(clasificacion: string): Observable<DirectoriosModel[]> {\n\n    if (this.clasificacionBase != clasificacion) {\n      this.directoriosDataStore = undefined;\n      this.clasificacionBase = clasificacion;\n    }\n\n    // const rawDataSource = collectionData<DirectoriosModel>(query<DirectoriosModel>(collection(this.afs, 'directorio') as CollectionReference<DirectoriosModel>, where(\"clasificaciones\", \"array-contains\", clasificacion), where('activo', '==', true), orderBy('directorio'), where('categoria', 'not-in', ['Directorio', 'Restaurantes', 'Servicios Públicos'])), { idField: 'id' });\n    const rawDataSource = collectionData<DirectoriosModel>(query<DirectoriosModel>(collection(this.afs, 'directorio') as CollectionReference<DirectoriosModel>, where(\"clasificaciones\", \"array-contains\", clasificacion), where('activo', '==', true), orderBy('directorio')), { idField: 'id' });\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('directorios-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getDirectoriosStore(dataSource: Observable<Array<DirectoriosModel>>): DataStore<Array<DirectoriosModel>> {\n    // Use cache if available\n    if (!this.directoriosDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: Array<DirectoriosModel> = [\n        new DirectoriosModel(),\n        new DirectoriosModel(),\n        new DirectoriosModel(),\n        new DirectoriosModel(),\n        new DirectoriosModel(),\n        new DirectoriosModel()\n      ];\n      this.directoriosDataStore = new DataStore(shellModel);\n\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the browser from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.directoriosDataStore.load(dataSource, 0);\n      } else { // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.directoriosDataStore.load(dataSource);\n      }\n    }\n\n    return this.directoriosDataStore;\n  }\n\n  //#endregion\n\n  //#region Clasificaciones\n  public getClasificacionesDataSource(categoriaId: string): Observable<Array<ClasificacionesModel>> {\n    if (this.categoriaIdBase != categoriaId) {\n      this.clasificacionesDataStore = undefined;\n      this.categoriaIdBase = categoriaId;\n    }\n\n    const rawDataSource = collectionData<ClasificacionesModel>(query<ClasificacionesModel>(collection(this.afs, 'clasificaciones') as CollectionReference<ClasificacionesModel>, where(\"tipoclasificaciones\", \"==\", categoriaId)), { idField: 'id' });\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('clasificaciones-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getClasificacionesStore(dataSource: Observable<Array<ClasificacionesModel>>): DataStore<Array<ClasificacionesModel>> {\n    // Use cache if available\n    if (!this.clasificacionesDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: Array<ClasificacionesModel> = [\n        new ClasificacionesModel(),\n        new ClasificacionesModel(),\n        new ClasificacionesModel(),\n        new ClasificacionesModel(),\n        new ClasificacionesModel(),\n        new ClasificacionesModel()\n      ];\n      this.clasificacionesDataStore = new DataStore(shellModel);\n\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the browser from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.clasificacionesDataStore.load(dataSource, 0);\n      } else { // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.clasificacionesDataStore.load(dataSource);\n      }\n    }\n\n    return this.clasificacionesDataStore;\n  }\n\n  // Filter users by age\n  public searchClasificaciones(lower: number, upper: number): Observable<Array<ClasificacionesModel>> {\n    return;\n  }\n  //#endregion\n\n  //#region ProductosSearch\n\n  public getDataSourceSearch(categoriaId: string, tiendaId: string, texto: string) {\n    if (tiendaId != '')\n      return collectionData<MisProductosModel>(query<MisProductosModel>(collection(this.afs, 'misproductos') as CollectionReference<MisProductosModel>, where(\"categoriaId\", \"==\", categoriaId), where(\"activo\", \"==\", true), where(\"productoArray\", \"array-contains-any\", texto.trim().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase().split(' ')), limit(20)), { idField: 'id' });\n    // return this.afs.collection<MisProductosModel>('misproductos', ref => ref.where(\"tiendaId\", \"==\", tiendaId).where(\"activo\", \"==\", true).where(\"productoArray\", \"array-contains-any\", texto.trim().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase().split(' ')).limit(20)).valueChanges({ idField: 'id' }) as Observable<unknown> as Observable<Array<MisProductosModel>>;\n    else\n      return collectionData<MisProductosModel>(query<MisProductosModel>(collection(this.afs, 'misproductos') as CollectionReference<MisProductosModel>, where(\"tiendaId\", \"==\", tiendaId), where(\"activo\", \"==\", true), where(\"productoArray\", \"array-contains-any\", texto.trim().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase().split(' ')), limit(20)), { idField: 'id' }).pipe(\n        leftJoinTiendas(this.afs, 'tiendaId', 'tiendas', 1),\n        shareReplay(1)\n      ) as Observable<unknown> as Observable<Array<MisProductosModel>>;\n    // return this.afs.collection<MisProductosModel>('misproductos', ref => ref.where(\"categoriaId\", \"==\", categoriaId).where(\"activo\", \"==\", true).where(\"productoArray\", \"array-contains-any\", texto.trim().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase().split(' ')).limit(20)).valueChanges({ idField: 'id' }).pipe(\n    //   leftJoinTiendas(this.afs, 'tiendaId', 'tiendas', 1),\n    //   shareReplay(1)\n    // ) as Observable<unknown> as Observable<Array<MisProductosModel>>;\n  }\n\n  public getProductosDataSourceSearch(categoriaId: string, tiendaId: string, texto: string): Observable<Array<MisProductosModel>> {\n    this.productosDataStore = undefined;\n\n    const rawDataSource = this.getDataSourceSearch(categoriaId, tiendaId, texto);\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('productos-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getProductosStoreSearch(dataSource: Observable<Array<MisProductosModel>>): DataStore<Array<MisProductosModel>> {\n    // Use cache if available\n    if (!this.productosDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: Array<MisProductosModel> = [\n        new MisProductosModel(),\n        new MisProductosModel(),\n        new MisProductosModel(),\n        new MisProductosModel(),\n        new MisProductosModel(),\n        new MisProductosModel()\n      ];\n      this.productosDataStore = new DataStore(shellModel);\n\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the browser from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.productosDataStore.load(dataSource, 0);\n      } else { // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.productosDataStore.load(dataSource);\n      }\n    }\n\n    return this.productosDataStore;\n  }\n\n  // Filter users by age\n  public searchProductosSearch(lower: number, upper: number): Observable<Array<ProductosModel>> {\n    return;\n  }\n  //#endregion\n\n  //#region Departamentos\n\n  public getDepartamentosDataSource(tiendaId: string): Observable<Array<DepartamentosModel>> {\n    if (this.tiendaIdBase != tiendaId) {\n      this.departamentosDataStore = undefined;\n      this.clasesDataStore = undefined;\n      this.tiendaIdBase = tiendaId;\n    }\n\n    const rawDataSource = collectionData<ClasesModel>(query<ClasesModel>(collection(this.afs, 'clases') as CollectionReference<ClasesModel>, where(\"tiendaId\", \"==\", tiendaId)), { idField: 'id' }).pipe(\n      leftJoinClases(this.afs, 'tiendaId', 'tiendas', 1),\n      leftJoinDepartamentos(this.afs, 'departamentoId', 'departamentos', 1),\n      shareReplay(1)\n    ) as Observable<unknown> as Observable<Array<DepartamentosModel>>;\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('departamentos-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getDepartamentosStore(dataSource: Observable<Array<DepartamentosModel>>): DataStore<Array<DepartamentosModel>> {\n    // Use cache if available\n    if (!this.departamentosDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: Array<DepartamentosModel> = [\n        new DepartamentosModel(),\n        new DepartamentosModel(),\n        new DepartamentosModel(),\n        new DepartamentosModel(),\n        new DepartamentosModel(),\n        new DepartamentosModel()\n      ];\n      this.departamentosDataStore = new DataStore(shellModel);\n\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the browser from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.departamentosDataStore.load(dataSource, 0);\n      } else { // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.departamentosDataStore.load(dataSource);\n      }\n    }\n\n    return this.departamentosDataStore;\n  }\n\n  // Filter users by age\n  public searchDepartamentos(lower: number, upper: number): Observable<Array<DepartamentosModel>> {\n    return;\n  }\n  //#endregion Departamentos\n\n  //#region Clases\n  public getClasesDataSource(tiendaId: string): Observable<Array<ClasesModel>> {\n\n    const rawDataSource = collectionData(query(collection(this.afs, 'misclases'), where(\"tiendaId\", \"==\", tiendaId)), { idField: 'id' })\n      .pipe(\n        leftJoinClases(this.afs, 'claseId', 'clases', 1),\n        shareReplay(1)\n      ) as Observable<unknown> as Observable<Array<ClasesModel>>;\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('clases-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getClasesStore(dataSource: Observable<Array<ClasesModel>>): DataStore<Array<ClasesModel>> {\n    // Use cache if available\n    if (!this.clasesDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: Array<ClasesModel> = [\n        new ClasesModel(),\n        new ClasesModel(),\n        new ClasesModel(),\n        new ClasesModel(),\n        new ClasesModel(),\n        new ClasesModel()\n      ];\n      this.clasesDataStore = new DataStore(shellModel);\n\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the browser from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.clasesDataStore.load(dataSource, 0);\n      } else { // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.clasesDataStore.load(dataSource);\n      }\n    }\n\n    return this.clasesDataStore;\n  }\n\n  // Filter users by age\n  public searchClases(lower: number, upper: number): Observable<Array<ClasesModel>> {\n    return;\n  }\n  //#endregion Clases\n\n  //#region Productos\n\n  public getProductosDataSource(tiendaId: string, claseId: string): Observable<Array<MisProductosModel>> {\n    if (this.tiendaIdBase != tiendaId || this.claseIdBase != claseId) {\n      this.productosDataStore = undefined;\n      this.tiendaIdBase = tiendaId;\n      this.claseIdBase = claseId;\n    }\n\n    var rawDataSource: Observable<Array<MisProductosModel>>;\n    if (claseId == \"\") {\n      rawDataSource = collectionData(query(collection(this.afs, 'misproductos'), where(\"tiendaId\", \"==\", tiendaId), where(\"activo\", \"==\", true), orderBy(\"producto\"), limit(20)), { idField: 'id' }) as Observable<unknown> as Observable<Array<MisProductosModel>>;\n    }\n    else {\n      rawDataSource = collectionData(query(collection(this.afs, 'misproductos'), where(\"tiendaId\", \"==\", tiendaId), where(\"claseId\", \"==\", claseId), where(\"activo\", \"==\", true), orderBy(\"producto\"), limit(20)), { idField: 'id' }) as Observable<unknown> as Observable<Array<MisProductosModel>>;\n    }\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('productos-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  // carga los productos por páginas\n  public loadProductos(tiendaId: string, claseId: string, start: string): Observable<Array<MisProductosModel>> {\n\n    var rawDataSource: Observable<Array<MisProductosModel>>;\n    if (start) {\n      rawDataSource = collectionData(query(collection(this.afs, 'misproductos'), where(\"tiendaId\", \"==\", tiendaId), where(\"claseId\", \"==\", claseId), where(\"activo\", \"==\", true), orderBy(\"producto\"), startAfter(start), limit(6)), { idField: 'id' }) as Observable<unknown> as Observable<Array<MisProductosModel>>;\n    }\n    else {\n      rawDataSource = collectionData(query(collection(this.afs, 'misproductos'), where(\"tiendaId\", \"==\", tiendaId), where(\"claseId\", \"==\", claseId), where(\"activo\", \"==\", true), orderBy(\"producto\"), limit(6)), { idField: 'id' }) as Observable<unknown> as Observable<Array<MisProductosModel>>;\n      // rawDataSource = this.afs.collection<MisProductosModel>('misproductos', ref =>\n      //   ref.where(\"tiendaId\", \"==\", tiendaId)\n      //     .where(\"claseId\", \"==\", claseId)\n      //     .where(\"activo\", \"==\", true)\n      //     .orderBy(\"producto\")\n      //     .limit(6))\n      //   .valueChanges({ idField: 'id' }) as Observable<unknown> as Observable<Array<MisProductosModel>>;\n    }\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('productos-state', rawDataSource);\n\n    return cachedDataSource;\n\n  }\n\n  public getProductosStore(dataSource: Observable<Array<MisProductosModel>>): DataStore<Array<MisProductosModel>> {\n    // Use cache if available\n    // if (!this.productosDataStore) {\n    // Initialize the model specifying that it is a shell model\n    const shellModel: Array<MisProductosModel> = [\n      new MisProductosModel(),\n      new MisProductosModel(),\n      new MisProductosModel(),\n      new MisProductosModel(),\n      new MisProductosModel(),\n      new MisProductosModel()\n    ];\n    this.productosDataStore = new DataStore(shellModel);\n\n    // If running in the server, then don't add shell to the Data Store\n    // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the browser from the server\n    if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n      // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n      this.productosDataStore.load(dataSource, 0);\n    } else { // On browser transitions\n      // Trigger the loading mechanism (with shell)\n      this.productosDataStore.load(dataSource);\n    }\n    // }\n\n    return this.productosDataStore;\n  }\n\n  //#endregion Productos\n\n  //#region Tiendas\n\n  public getTiendasDataSource(categoriaId: string): Observable<Array<TiendasModel>> {\n    // rawDataSource = collectionData(query(collection(this.afs, 'misproductos'), where(\"tiendaId\", \"==\", tiendaId), where(\"activo\", \"==\", true), orderBy(\"producto\"), limit(20)), { idField: 'id' }) as Observable<unknown> as Observable<Array<MisProductosModel>>;\n    const rawDataSource = collectionData(query(collection(this.afs, 'tiendas'), where(\"categoriaId\", \"==\", categoriaId), where('activa', '==', true), orderBy('posicion')), { idField: 'id' })\n      .pipe(\n        leftJoinHorarios(this.afs, 'id', 'mishorarios', 1),\n        shareReplay(1)\n      ) as Observable<unknown> as Observable<Array<TiendasModel>>;\n\n\n    // const rawDataSource = this.afs.collection<TiendasModel>('tiendas', ref => ref.where('categoriaId', '==', categoriaId).where('activa', '==', true).orderBy('posicion')).valueChanges({ idField: 'id' })\n    //     .pipe(\n    //         map(actions => actions.map(tienda => {\n    //             return { ...tienda } as TiendasModel;\n    //         })\n    //         )\n    //     );\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('tiendas-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getTiendasStore(categoriaId: string, dataSource: Observable<Array<TiendasModel>>): DataStore<Array<TiendasModel>> {\n    // Use cache if available\n    if (!this.tiendasDataStore || this.categoriaBaseId != categoriaId) {\n      this.categoriaBaseId = categoriaId;\n      // Initialize the model specifying that it is a shell model\n      const shellModel: Array<TiendasModel> = [\n        new TiendasModel(),\n        new TiendasModel(),\n        new TiendasModel(),\n        new TiendasModel(),\n        new TiendasModel(),\n        new TiendasModel()\n      ];\n      this.tiendasDataStore = new DataStore(shellModel);\n\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the browser from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.tiendasDataStore.load(dataSource, 0);\n      } else { // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.tiendasDataStore.load(dataSource);\n      }\n    }\n\n    return this.tiendasDataStore;\n  }\n\n  // Filter users by age\n  public searchTiendas(): Observable<Array<TiendasModel>> {\n    return;\n  }\n  //#endregion Tiendas\n\n\n  //#region Servicio\n\n  public getServiciosDataSource(): Observable<Array<ServiciosModel>> {\n\n    const rawDataSource = collectionData(query(collection(this.afs, 'servicios'), where('activo', '==', true), orderBy('posicion')), { idField: 'id' }) as Observable<Array<ServiciosModel>>;\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('servicios-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getServiciosStore(dataSource: Observable<Array<ServiciosModel>>): DataStore<Array<ServiciosModel>> {\n    // Use cache if available\n    if (!this.servicioDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: Array<ServiciosModel> = [\n        new ServiciosModel(),\n        new ServiciosModel(),\n        new ServiciosModel(),\n        new ServiciosModel(),\n        new ServiciosModel(),\n        new ServiciosModel()\n      ];\n      this.servicioDataStore = new DataStore(shellModel);\n\n      // If running in the server, then don't add shell to the Data Store\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the browser from the server\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n        this.servicioDataStore.load(dataSource, 0);\n      } else { // On browser transitions\n        // Trigger the loading mechanism (with shell)\n        this.servicioDataStore.load(dataSource);\n      }\n    }\n\n    return this.servicioDataStore;\n  }\n\n  // Filter users by age\n  public searchServicios(): Observable<Array<ServiciosModel>> {\n    return;\n  }\n\n  //#endregion\n\n  //#region Links\n  public getLinksDataSource(servicioId: string): Observable<Array<LinksModel>> {\n\n    const rawDataSource = collectionData(query(collection(this.afs, 'links'), where(\"servicioId\", \"==\", servicioId)), { idField: 'id' })\n      .pipe(\n        // leftJoinLinks(this.afs, 'claseId', 'clases', 1),\n        shareReplay(1)\n      ) as Observable<unknown> as Observable<Array<LinksModel>>;\n\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\n    // duplicate http requests.\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('clases-state', rawDataSource);\n\n    return cachedDataSource;\n  }\n\n  public getLinksStore(dataSource: Observable<Array<LinksModel>>): DataStore<Array<LinksModel>> {\n    // Use cache if available\n    // if (!this.linksDataStore) {\n    // Initialize the model specifying that it is a shell model\n    const shellModel: Array<LinksModel> = [\n      new LinksModel(),\n      new LinksModel(),\n      new LinksModel(),\n      new LinksModel(),\n      new LinksModel(),\n      new LinksModel()\n    ];\n    this.linksDataStore = new DataStore(shellModel);\n\n    // If running in the server, then don't add shell to the Data Store\n    // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the browser from the server\n    if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\n      // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\n      this.linksDataStore.load(dataSource, 0);\n    } else { // On browser transitions\n      // Trigger the loading mechanism (with shell)\n      this.linksDataStore.load(dataSource);\n    }\n    // }\n\n    return this.linksDataStore;\n  }\n\n  // Filter users by age\n  public searchLinks(): Observable<Array<ClasesModel>> {\n    return;\n  }\n  //#endregion Links\n\n  //#region Datos\n  getSeleccionadores(productoId: string) {\n    return collectionData(query(collection(this.afs, 'seleccionadores'), where('productoId', '==', productoId), where('activo', '==', true), orderBy('titulo'), orderBy('posicion')), { idField: 'id' });\n  }\n\n  //#region Datos\n\n  getDato() {\n    var user = JSON.parse(localStorage.getItem('user'));\n    var uid = user.uid;\n    return collectionData(query(collection(this.afs, 'datos'), where('uid', '==', uid)), { idField: 'id' }) as unknown as Observable<DatosModel>;\n  }\n\n  async getDatoAsync(): Promise<DatosModel> {\n    var user = await JSON.parse(localStorage.getItem('user'));\n    var uid = user.uid;\n    const q = query(collection(this.afs, \"datos\"), where(\"uid\", \"==\", uid));\n    const querySnapshot = await getDocs(q);\n    if (querySnapshot.docs.length > 0)\n      return querySnapshot.docs[0].data() as unknown as DatosModel;\n  }\n\n  createDato(values) {\n    if (!values.id) {\n      var user = JSON.parse(localStorage.getItem('user'));\n      values.uid = user.uid;\n      const datosRef = doc(collection(this.afs, \"datos\"));\n      setDoc(datosRef, {\n        uid: values.uid,\n        tipo: values.tipo,\n        numero: values.numero,\n        direccion: values.direccion,\n        correo: values.correo,\n        nombre: values.nombre,\n        telefono: values.telefono,\n        pais: values.pais,\n      });\n    }\n    else {\n      const datosRef = doc(this.afs, \"datos\", values.id);\n      return updateDoc(datosRef, {\n        uid: values.uid,\n        tipo: values.tipo,\n        numero: values.numero,\n        direccion: values.direccion,\n        correo: values.correo,\n        nombre: values.nombre,\n        telefono: values.telefono,\n        pais: values.pais,\n      });\n    }\n  }\n\n  //#endregion Datos\n\n}\n"],"names":["Inject","Injectable","PLATFORM_ID","Auth","createUserWithEmailAndPassword","signInWithEmailAndPassword","collection","collectionData","Firestore","query","where","setDoc","getDocs","getDoc","updateDoc","deleteDoc","limit","startAfter","CategoriasModel","addDoc","doc","orderBy","serverTimestamp","switchMap","map","shareReplay","DireccionesModel","TiendasModel","HttpClient","HttpHeaders","CuentasModel","TransferStateHelper","DataStore","isPlatformServer","DirectoriosModel","ClasificacionesModel","MisProductosModel","leftJoinTiendas","leftJoinClases","leftJoinDepartamentos","leftJoinHorarios","DepartamentosModel","ClasesModel","ServiciosModel","LinksModel","FirebaseService","constructor","platformId","afAuth","http","transferStateHelper","afs","onAuthStateChanged","user","currentUser","signUp","email","password","credential","console","log","uid","signIn","signOut","addChatMessage","msg","from","createdAt","getChatMessages","users","getUsers","pipe","res","idField","messages","m","fromName","getUserForMsg","myMsg","msgFromId","usr","getDispositivos","tiendaId","ret","JSON","parse","localStorage","getItem","q","promise","docs","length","tienda","data","correo","q1","promise1","usuario","q2","promise2","dispositivo","push","dispositivoId","sendMensajeTienda","mensaje","dispositivos","pushMessage","include_player_ids","keys","privateKey","onesignal","httpOptionsOneSignal","headers","Authorization","stringify","url","Promise","resolve","reject","post","subscribe","error","createDevice","telefono","phoneNumber","device","refDispositivos","getTipos","getDireccionAsync","direccionId","querySnapshot","getSucursalAsync","sucursalId","getCategorias","searchCategorias","categoria","createPedido","direccion","pago","values","numero","pedidoId","articuloId","contador","cont","updateContador","tiendas","Array","forEach","producto","find","x","refPedido","fecha","Date","pedido","id","diaHora","toString","detalle","pagoId","cuenta","cancelado","elaborado","entregado","activo","titulos","titulo","seleccionado","seleccionadores","seleccionador","refArticulos","articulo","productoId","precio","precioVlr","presentacion","presentacionTxt","cantidad","amount","imagen","observaciones","property1","toUpperCase","listado","contadoresRef","tipo","then","catch","getCuentasDataSource","rawDataSource","cachedDataSource","checkDataSourceState","getCuentasStore","dataSource","cuentasDataStore","shellModel","load","getDirecciones","updateDireccion","refDirecciones","latitud","longitud","duracion","distancia","direccionesRef","deleteDireccion","getDireccionesDataSource","getDireccionesStore","direccionesDataStore","getCategoriasDataSource","getCategoriasStore","categoriasDataStore","getDirectoriosDataSource","clasificacion","clasificacionBase","directoriosDataStore","undefined","getDirectoriosStore","getClasificacionesDataSource","categoriaId","categoriaIdBase","clasificacionesDataStore","getClasificacionesStore","searchClasificaciones","lower","upper","getDataSourceSearch","texto","trim","normalize","replace","toLowerCase","split","getProductosDataSourceSearch","productosDataStore","getProductosStoreSearch","searchProductosSearch","getDepartamentosDataSource","tiendaIdBase","departamentosDataStore","clasesDataStore","getDepartamentosStore","searchDepartamentos","getClasesDataSource","getClasesStore","searchClases","getProductosDataSource","claseId","claseIdBase","loadProductos","start","getProductosStore","getTiendasDataSource","getTiendasStore","tiendasDataStore","categoriaBaseId","searchTiendas","getServiciosDataSource","getServiciosStore","servicioDataStore","searchServicios","getLinksDataSource","servicioId","getLinksStore","linksDataStore","searchLinks","getSeleccionadores","getDato","getDatoAsync","createDato","datosRef","nombre","pais","args","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}